#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2020 The WorkflowHub Team.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

from typing import Dict, List, Optional, Union

from workflowhub.generator.workflow.abstract_recipe import WorkflowRecipe
from workflowhub.common.file import FileLink
from workflowhub.common.task import Task
from workflowhub.common.workflow import Workflow

from itertools import product

structure = {}

class SkeletonRecipe(WorkflowRecipe):
    """A Skeleton workflow recipe class for creating synthetic workflow traces.

    :param num_pairs: The number of pair of signals to estimate earthquake STFs.
    :type num_pairs: int
    :param data_footprint: The upper bound for the workflow total data footprint (in bytes).
    :type data_footprint: int
    :param num_tasks: The upper bound for the total number of tasks in the workflow.
    :type num_tasks: int
    """

    def __init__(self,
                 data_footprint: Optional[int] = 0,
                 num_tasks: Optional[int] = 3
                 ) -> None:
        super().__init__("Skeleton", data_footprint, num_tasks)
        self._init_()

    def _init_(self, **kwargs) -> None:
        self.tasks = {}
        self.variables = kwargs

    @classmethod
    def from_num_tasks(cls, num_tasks: int) -> 'SkeletonRecipe':
        """
        Instantiate a Skeleton workflow recipe that will generate synthetic workflows up to
        the total number of tasks provided.

        :param num_tasks: The upper bound for the total number of tasks in the workflow (at least 3).
        :type num_tasks: int

        :return: A Skeleton workflow recipe object that will generate synthetic workflows up
                 to the total number of tasks provided.
        :rtype: SkeletonRecipe
        """
        return cls(num_tasks=num_tasks)

    def _add_nodes(self, 
                   node_type: str, 
                   node_id: Union[str, int], 
                   duplicity: Union[str, int],
                   tasks: Dict[str, str],
                   workflow: Workflow) -> List[str]:
        
        if (node_type, node_id) in tasks:
            return tasks[(node_type, node_id)]

        num_nodes = duplicity if isinstance(duplicity, int) else self.variables[duplicity]

        task_names = []
        for _ in range(num_nodes):
            task_name = self._generate_task_name(node_type)
            task_names.append(task_name)
            task = self._generate_task(node_type, task_name)
            workflow.add_node(task_name, task=task)

        tasks[(node_type, node_id)] = task_names
        return task_names

    def _add_component(self, component_name: str, workflow: Workflow) -> List[str]:
        edges = structure['components'][component_name]

        tasks={}
        dsts = set()
        srcs = set()
        for src, dst in edges:
            if src[0] in structure["node_types"]:
                src_ids = self._add_nodes(*src, tasks, workflow)
            else:
                duplicity = src[2] if isinstance(src[2], int) else self.variables[src[2]]
                src_ids = [
                    _id
                    for i in range(duplicity)
                    for _id in self._add_component(src[0], workflow)
                ]

            if dst[0] in structure["node_types"]:
                dst_ids = self._add_nodes(*dst, tasks, workflow)
            else:
                duplicity = dst[2] if isinstance(dst[2], int) else self.variables[dst[2]]
                dst_ids = [
                    _id
                    for i in range(duplicity)
                    for _id in self._add_component(dst[0], workflow)
                ]

            dsts.update(dst_ids)
            srcs.update(src_ids)
            for src_id, dst_id in product(src_ids, dst_ids):
                workflow.add_edge(src_id, dst_id)

        return list(dsts - srcs)

    def build_workflow(self, workflow_name: Optional[str] = None) -> Workflow:
        """Generate a synthetic workflow trace of a Skeleton workflow.

        :param workflow_name: The workflow name
        :type workflow_name: int

        :return: A synthetic workflow trace object.
        :rtype: Workflow
        """
        workflow = Workflow(name=self.name + "-synthetic-trace" if not workflow_name else workflow_name, makespan=None)

        self._add_component(structure['root'], workflow)
        

        self.workflows.append(workflow)
        return workflow

    def _workflow_recipe(self) -> Dict:
        """
        Recipe for generating synthetic traces of the Skeleton workflow. Recipes can be
        generated by using the :class:`~workflowhub.trace.trace_analyzer.TraceAnalyzer`.

        :return: A recipe in the form of a dictionary in which keys are task prefixes.
        :rtype: Dict[str, Any]
        """
        default = {
            "runtime": {
                "min": 0.087,
                "max": 5.615,
                "distribution": {
                    "name": "alpha",
                    "params": [
                        2.8535577839854487e-09,
                        -0.6968250029499959,
                        1.0879675561652093
                    ]
                }
            },
            "input": {
                ".lht": {
                    "distribution": {
                        "name": "fisk",
                        "params": [
                            0.4312877358390993,
                            -5.198983213279189e-26,
                            2.042713032349936
                        ]
                    },
                    "min": 1024,
                    "max": 16012
                }
            },
            "output": {
                ".stf": {
                    "distribution": {
                        "name": "argus",
                        "params": [
                            1.3444573433417438e-05,
                            -2922.408647942764,
                            6738.674391937242
                        ]
                    },
                    "min": 1144,
                    "max": 17016
                }
            }
        }
        return {
            node_type: default
            for node_type in structure["node_types"]
        }
